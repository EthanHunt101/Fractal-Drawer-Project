import java.util.ArrayList;

/**
 * Represents a fractal structure based on a rectangle or square.
 * The fractal is recursively generated by subdividing the base shape
 * into a 3x3 grid and excluding the center piece at each level. 
 * 
 * @param <T> A type that extends Polygon and implements RectangleShape.
 * @author Ethan Hunt
 */
public class RectangleFractal<T extends Polygon & RectangleShape> extends Fractal<T> {

    /**
     * Constructs a RectangleFractal instance with a base shape and number of levels.
     * 
     * @param baseShape The base rectangle or square shape for the fractal.
     * @param numLevels The number of recursive levels for the fractal.
     */
    public RectangleFractal(T baseShape, int numLevels) {
        super(baseShape, numLevels);
    }

    /**
     * Returns the lines that form the fractal.
     * 
     * @return An array of lines representing the fractal structure.
     */
    @Override
    public Line[] getLines() {
        // Start the recursive process to generate the fractal lines
        return createFractalLines((Rectangle) this.getBaseShape(), getNumLevels());
    }

    /**
     * Recursively generates the lines for the fractal based on the input rectangle and level.
     * 
     * @param rec The base rectangle to generate lines from.
     * @param levelsLeft The number of recursive levels remaining.
     * @return An array of lines representing the fractal at the current level.
     */
    private Line[] createFractalLines(Rectangle rec, int levelsLeft) {
        if (levelsLeft == 0) {
            // Base case: return the lines of the rectangle at the current level
            return rec.getLines();
        }

        // List to store all lines of the current fractal level
        ArrayList<Line> levelLines = new ArrayList<>();

        // Calculate the dimensions of the smaller rectangles
        double smallerWidth = rec.getWidth() / 3;
        double smallerHeight = rec.getHeight() / 3;
        Point bigCenter = rec.getCenter(); // Center of the current rectangle

        // Loop through the 3x3 grid
        for (int horizRec = -1; horizRec < 2; horizRec++) {
            for (int vertRec = -1; vertRec < 2; vertRec++) {
                // Skip the center piece of the 3x3 grid
                if (horizRec == 0 && vertRec == 0) {
                }
                
                else {
                    // Calculate the center of the current sub-rectangle
                    Point newCenter = new Point(
                        bigCenter.getX() + (horizRec * smallerWidth),
                        bigCenter.getY() + (vertRec * smallerHeight));

                    // Create the sub-rectangle or square
                    Rectangle smallerRec;
                    if (rec instanceof Square) {
                        smallerRec = new Square(newCenter, smallerHeight);
                    } else {
                        smallerRec = new Rectangle(newCenter, smallerWidth, smallerHeight);
                    }

                    // Recursively generate lines for the sub-rectangle
                    Line[] shapeLines = createFractalLines(smallerRec, levelsLeft - 1);

                    // Add the lines of the sub-rectangle to the current level
                    for (Line line : shapeLines) {
                        levelLines.add(line);
                    }
                }
            }
        }

        // Convert the ArrayList to an array and return the lines of the fractal
        return levelLines.toArray(new Line[levelLines.size()]);
    }
}

